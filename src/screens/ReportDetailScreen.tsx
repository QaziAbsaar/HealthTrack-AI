import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  ScrollView,
  TouchableOpacity,
  StatusBar,
  SafeAreaView,
  Share,
  Alert,
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { useTheme } from '../context/ThemeContext';
import { useLanguage } from '../context/LanguageContext';
import { MedicalReport, BloodTestResults, PrescriptionData } from '../types/index';
import StorageService from '../services/StorageService';
import SummarizerService from '../services/SummarizerService';

export default function ReportDetailScreen({ route, navigation }: any) {
  const { reportId } = route.params;
  const { theme, colors } = useTheme();
  const { t, isRTL } = useLanguage();
  const [report, setReport] = useState<MedicalReport | null>(null);
  const [loading, setLoading] = useState(true);
  const [aiSummary, setAiSummary] = useState<string>('');

  useEffect(() => {
    loadReport();
  }, [reportId]);

  const loadReport = async () => {
    try {
      setLoading(true);
      const reportData = await StorageService.getReportById(reportId);
      if (reportData) {
        setReport(reportData);
        
        // Generate AI summary if not available
        if (!reportData.summary) {
          generateSummary(reportData);
        } else {
          setAiSummary(reportData.summary);
        }
      } else {
        Alert.alert('Error', 'Report not found');
        navigation.goBack();
      }
    } catch (error) {
      console.error('Error loading report:', error);
      Alert.alert('Error', 'Failed to load report');
    } finally {
      setLoading(false);
    }
  };

  const generateSummary = async (reportData: MedicalReport) => {
    try {
      const result = await SummarizerService.generateSummary(
        reportData.correctedText || reportData.extractedText,
        reportData.type
      );
      
      if (result.summary) {
        setAiSummary(result.summary);
        
        // Save summary to report
        const updatedReport = { ...reportData, summary: result.summary };
        await StorageService.saveReport(updatedReport);
        setReport(updatedReport);
      }
    } catch (error) {
      console.error('Error generating summary:', error);
    }
  };

  const toggleBookmark = async () => {
    if (!report) return;
    
    const updatedReport = { ...report, isBookmarked: !report.isBookmarked };
    await StorageService.saveReport(updatedReport);
    setReport(updatedReport);
  };

  const shareReport = async () => {
    if (!report) return;
    
    try {
      const shareContent = `Medical Report: ${report.title}\n\nDate: ${report.dateCreated.toLocaleDateString()}\n\nSummary:\n${aiSummary || 'No summary available'}\n\nGenerated by Medical Report Organizer`;
      
      await Share.share({
        message: shareContent,
        title: report.title,
      });
    } catch (error) {
      console.error('Error sharing report:', error);
    }
  };

  const deleteReport = async () => {
    Alert.alert(
      'Delete Report',
      'Are you sure you want to delete this report? This action cannot be undone.',
      [
        { text: 'Cancel', style: 'cancel' },
        {
          text: 'Delete',
          style: 'destructive',
          onPress: async () => {
            try {
              await StorageService.deleteReport(reportId);
              navigation.goBack();
            } catch (error) {
              Alert.alert('Error', 'Failed to delete report');
            }
          },
        },
      ]
    );
  };

  const renderBloodTestResults = (bloodTest: BloodTestResults) => (
    <View style={{ marginBottom: 20 }}>
      <Text style={{
        fontSize: 18,
        fontWeight: '600',
        color: colors.text,
        marginBottom: 12,
      }}>
        Blood Test Results
      </Text>
      
      {Object.entries(bloodTest).map(([key, value]) => {
        if (!value) return null;
        
        const statusColor = 
          value.status === 'normal' ? colors.success :
          value.status === 'high' || value.status === 'low' ? colors.warning :
          colors.error;

        return (
          <View key={key} style={{
            backgroundColor: colors.surface,
            padding: 15,
            borderRadius: 8,
            marginBottom: 8,
            borderLeftWidth: 4,
            borderLeftColor: statusColor,
          }}>
            <View style={{
              flexDirection: isRTL ? 'row-reverse' : 'row',
              justifyContent: 'space-between',
              alignItems: 'center',
            }}>
              <Text style={{
                fontSize: 16,
                fontWeight: '500',
                color: colors.text,
                flex: 1,
              }}>
                {key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}
              </Text>
              
              <View style={{ alignItems: isRTL ? 'flex-start' : 'flex-end' }}>
                <Text style={{
                  fontSize: 16,
                  fontWeight: '600',
                  color: statusColor,
                }}>
                  {value.value} {value.unit}
                </Text>
                {value.normalRange && (
                  <Text style={{
                    fontSize: 12,
                    color: colors.textSecondary,
                  }}>
                    Normal: {value.normalRange}
                  </Text>
                )}
              </View>
            </View>
            
            <View style={{
              backgroundColor: statusColor + '20',
              paddingHorizontal: 8,
              paddingVertical: 4,
              borderRadius: 12,
              alignSelf: 'flex-start',
              marginTop: 8,
            }}>
              <Text style={{
                fontSize: 12,
                color: statusColor,
                fontWeight: '500',
                textTransform: 'capitalize',
              }}>
                {value.status}
              </Text>
            </View>
          </View>
        );
      })}
    </View>
  );

  const renderPrescriptionData = (prescription: PrescriptionData) => (
    <View style={{ marginBottom: 20 }}>
      <Text style={{
        fontSize: 18,
        fontWeight: '600',
        color: colors.text,
        marginBottom: 12,
      }}>
        Prescription Details
      </Text>
      
      {prescription.doctor && (
        <View style={{ marginBottom: 12 }}>
          <Text style={{ fontSize: 14, color: colors.textSecondary }}>Doctor</Text>
          <Text style={{ fontSize: 16, color: colors.text, fontWeight: '500' }}>
            {prescription.doctor}
          </Text>
        </View>
      )}
      
      {prescription.clinic && (
        <View style={{ marginBottom: 12 }}>
          <Text style={{ fontSize: 14, color: colors.textSecondary }}>Clinic</Text>
          <Text style={{ fontSize: 16, color: colors.text, fontWeight: '500' }}>
            {prescription.clinic}
          </Text>
        </View>
      )}

      <Text style={{
        fontSize: 16,
        fontWeight: '600',
        color: colors.text,
        marginBottom: 8,
        marginTop: 16,
      }}>
        Medications
      </Text>
      
      {prescription.medications.map((medication, index) => (
        <View key={index} style={{
          backgroundColor: colors.surface,
          padding: 15,
          borderRadius: 8,
          marginBottom: 8,
        }}>
          <Text style={{
            fontSize: 16,
            fontWeight: '600',
            color: colors.text,
            marginBottom: 4,
          }}>
            {medication.name}
          </Text>
          
          <Text style={{
            fontSize: 14,
            color: colors.primary,
            marginBottom: 2,
          }}>
            {medication.dosage} â€¢ {medication.frequency}
          </Text>
          
          {medication.duration && (
            <Text style={{
              fontSize: 12,
              color: colors.textSecondary,
              marginBottom: 4,
            }}>
              Duration: {medication.duration}
            </Text>
          )}
          
          {medication.instructions && (
            <Text style={{
              fontSize: 12,
              color: colors.textSecondary,
              fontStyle: 'italic',
            }}>
              {medication.instructions}
            </Text>
          )}
        </View>
      ))}
    </View>
  );

  if (loading || !report) {
    return (
      <SafeAreaView style={{ flex: 1, backgroundColor: colors.background }}>
        <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
          <Text style={{ color: colors.textSecondary }}>Loading report...</Text>
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={{ flex: 1, backgroundColor: colors.background }}>
      <StatusBar barStyle={theme === 'dark' ? 'light-content' : 'dark-content'} />
      
      {/* Header */}
      <View style={{
        padding: 20,
        borderBottomWidth: 1,
        borderBottomColor: colors.border,
        flexDirection: isRTL ? 'row-reverse' : 'row',
        alignItems: 'center',
        justifyContent: 'space-between',
      }}>
        <TouchableOpacity onPress={() => navigation.goBack()}>
          <Ionicons 
            name={isRTL ? 'chevron-forward' : 'chevron-back'} 
            size={24} 
            color={colors.text} 
          />
        </TouchableOpacity>
        
        <View style={{
          flexDirection: isRTL ? 'row-reverse' : 'row',
          alignItems: 'center',
          gap: 15,
        }}>
          <TouchableOpacity onPress={toggleBookmark}>
            <Ionicons 
              name={report.isBookmarked ? 'bookmark' : 'bookmark-outline'} 
              size={24} 
              color={report.isBookmarked ? colors.primary : colors.textSecondary} 
            />
          </TouchableOpacity>
          
          <TouchableOpacity onPress={shareReport}>
            <Ionicons name="share-outline" size={24} color={colors.textSecondary} />
          </TouchableOpacity>
          
          <TouchableOpacity onPress={deleteReport}>
            <Ionicons name="trash-outline" size={24} color={colors.error} />
          </TouchableOpacity>
        </View>
      </View>

      <ScrollView style={{ flex: 1 }} contentContainerStyle={{ padding: 20 }}>
        {/* Report Header */}
        <View style={{ marginBottom: 24 }}>
          <Text style={{
            fontSize: 24,
            fontWeight: 'bold',
            color: colors.text,
            marginBottom: 8,
            textAlign: isRTL ? 'right' : 'left',
          }}>
            {report.title}
          </Text>
          
          <Text style={{
            fontSize: 14,
            color: colors.textSecondary,
            textAlign: isRTL ? 'right' : 'left',
          }}>
            {report.dateCreated.toLocaleDateString()} â€¢ {report.type.replace('_', ' ')}
          </Text>
        </View>

        {/* AI Summary */}
        {aiSummary && (
          <View style={{
            backgroundColor: colors.primary + '10',
            padding: 16,
            borderRadius: 12,
            marginBottom: 20,
            borderLeftWidth: 4,
            borderLeftColor: colors.primary,
          }}>
            <View style={{
              flexDirection: isRTL ? 'row-reverse' : 'row',
              alignItems: 'center',
              marginBottom: 8,
            }}>
              <Ionicons 
                name="sparkles" 
                size={16} 
                color={colors.primary} 
                style={{ marginRight: isRTL ? 0 : 6, marginLeft: isRTL ? 6 : 0 }}
              />
              <Text style={{
                fontSize: 16,
                fontWeight: '600',
                color: colors.primary,
              }}>
                AI Summary
              </Text>
            </View>
            <Text style={{
              fontSize: 14,
              color: colors.text,
              lineHeight: 20,
              textAlign: isRTL ? 'right' : 'left',
            }}>
              {aiSummary}
            </Text>
          </View>
        )}

        {/* Parsed Data */}
        {report.parsedData?.bloodTest && renderBloodTestResults(report.parsedData.bloodTest)}
        {report.parsedData?.prescription && renderPrescriptionData(report.parsedData.prescription)}

        {/* Original Text */}
        <View style={{ marginBottom: 20 }}>
          <Text style={{
            fontSize: 18,
            fontWeight: '600',
            color: colors.text,
            marginBottom: 12,
          }}>
            Original Text
          </Text>
          
          <View style={{
            backgroundColor: colors.surface,
            padding: 16,
            borderRadius: 8,
            borderWidth: 1,
            borderColor: colors.border,
          }}>
            <Text style={{
              fontSize: 14,
              color: colors.text,
              lineHeight: 20,
              textAlign: isRTL ? 'right' : 'left',
            }}>
              {report.correctedText || report.extractedText}
            </Text>
          </View>
        </View>

        {/* Tags */}
        {report.tags && report.tags.length > 0 && (
          <View style={{ marginBottom: 20 }}>
            <Text style={{
              fontSize: 18,
              fontWeight: '600',
              color: colors.text,
              marginBottom: 12,
            }}>
              Tags
            </Text>
            
            <View style={{
              flexDirection: isRTL ? 'row-reverse' : 'row',
              flexWrap: 'wrap',
              gap: 8,
            }}>
              {report.tags.map((tag, index) => (
                <View key={index} style={{
                  backgroundColor: colors.primary + '20',
                  paddingHorizontal: 12,
                  paddingVertical: 6,
                  borderRadius: 16,
                }}>
                  <Text style={{
                    fontSize: 12,
                    color: colors.primary,
                    fontWeight: '500',
                  }}>
                    {tag}
                  </Text>
                </View>
              ))}
            </View>
          </View>
        )}
      </ScrollView>
    </SafeAreaView>
  );
}
